import RPi.GPIO as GPIO          
from time import sleep
import time


in1 = 3
in2 = 4
in3 = 14
in4 = 15
enA = 2
enB = 18
encoderA = 21
encoderB = 16
distance=0.0
currentStateA = 0
previousStateA = 0
currentStateB = 0
previousStateB = 0
start_time=time.time()

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(in1,GPIO.OUT)
GPIO.setup(in2,GPIO.OUT)
GPIO.setup(enA,GPIO.OUT)
GPIO.setup(in3,GPIO.OUT)
GPIO.setup(in4,GPIO.OUT)
GPIO.setup(enB,GPIO.OUT)
GPIO.setup(encoderA,GPIO.IN)
GPIO.setup(encoderB,GPIO.IN)
pwmA=GPIO.PWM(enA,100)
pwmB=GPIO.PWM(enB,100)
pwmA.start(0)
pwmB.start(0)
previousStateA=GPIO.input(encoderA)
previousStateB=GPIO.input(encoderB)
    


def forward():
    GPIO.output(in1,GPIO.HIGH)
    GPIO.output(in2,GPIO.LOW)
    pwmA.ChangeDutyCycle(40)
    GPIO.output(in3,GPIO.HIGH)
    GPIO.output(in4,GPIO.LOW)
    pwmB.ChangeDutyCycle(40)
    pass
    #time.sleep(1)
   
    #if distance==0.1:
    #    stop()

def forward2():
    GPIO.output(in1,GPIO.HIGH)
    GPIO.output(in2,GPIO.LOW)
    pwmA.ChangeDutyCycle(30)
    GPIO.output(in3,GPIO.HIGH)
    GPIO.output(in4,GPIO.LOW)
    pwmB.ChangeDutyCycle(30)
    
    
def backward():
    GPIO.output(in1,GPIO.LOW)
    GPIO.output(in2,GPIO.HIGH)
    pwmA.ChangeDutyCycle(60)
    GPIO.output(in3,GPIO.LOW)
    GPIO.output(in4,GPIO.HIGH)
    pwmB.ChangeDutyCycle(60)
    pass
    #time.sleep(3)
    
    
def left():
    GPIO.output(in1,GPIO.HIGH)
    GPIO.output(in2,GPIO.LOW)
    pwmA.ChangeDutyCycle(70)
    GPIO.output(in3,GPIO.LOW)
    GPIO.output(in4,GPIO.LOW)
    pwmB.ChangeDutyCycle(0)
    pass
    #time.sleep(1)
    
def right():
    GPIO.output(in1,GPIO.LOW)
    GPIO.output(in2,GPIO.LOW)
    pwmA.ChangeDutyCycle(0)
    GPIO.output(in3,GPIO.HIGH)
    GPIO.output(in4,GPIO.LOW)
    pwmB.ChangeDutyCycle(50)
    pass
    #time.sleep(1)
    
def stop():
    GPIO.output(in1,GPIO.LOW)
    GPIO.output(in2,GPIO.LOW)
    pwmA.ChangeDutyCycle(0)
    GPIO.output(in3,GPIO.LOW)
    GPIO.output(in4,GPIO.LOW)
    pwmB.ChangeDutyCycle(0)
    time.sleep(10)

    pass
    

while True:
    right()
    currentStateA = GPIO.input(encoderA)
    if currentStateA != previousStateA:
        distance+=(1*21.2/4000)
        print("Distance: ",distance)
    previousStateA = currentStateA
    y=45
    if distance >=(0.20*3.142*y/180):
        stop()



    forward()
    
    currentState = GPIO.input(encoder)
    if currentState != previousState:
        distance+=(1*21.2/4000)
        print("Distance: ",distance)
    previousState = currentState
    if distance >=2.0 and distance <3.0:
        stop()




        #x=input("Car movement:")
        #if x=='f':
        #    forward()
        #elif x=='b':
        #    backward()    
        #elif x=='l':
         #   left()    
        #elif x=='r':
         #   right()    
        #elif x=='s':
         #   stop()
            
    
    left()
    currentStateB = GPIO.input(encoderB)
    if currentStateB != previousStateB:
        distance+=(1*21.2/4000)
        print("Distance: ",distance)
    previousStateB = currentStateB
    if distance >=0.275:
        stop()
        
        
        
    
        #if time.time()-start_time>=1:
        #    stop()
    
        
  
    
    
        
   
except KeyboardInterrupt:
    GPIO.cleanup()
