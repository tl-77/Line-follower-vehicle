import numpy as np
import cv2
import RPi.GPIO as GPIO
from time import sleep
import time

video_capture = cv2.VideoCapture(0)
video_capture.set(3, 160)
video_capture.set(4, 120)
in1 = 3
in2 = 4
in3 = 14
in4 = 15
enA = 2
enB = 18
 
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(in1,GPIO.OUT)
GPIO.setup(in2,GPIO.OUT)
GPIO.setup(enA,GPIO.OUT)
GPIO.setup(in3,GPIO.OUT)
GPIO.setup(in4,GPIO.OUT) 
GPIO.setup(enB,GPIO.OUT)
pwmA=GPIO.PWM(enA,100)
pwmB=GPIO.PWM(enB,100)
pwmA.start(0)
pwmB.start(0)


while(True):

    # Capture the frames
    ret, frame = video_capture.read()
    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Gaussian blur
    blur = cv2.GaussianBlur(gray,(5,5),0)
    # Color thresholding
    ret,thresh = cv2.threshold(blur,60,255,cv2.THRESH_BINARY_INV)
    # Find the contours of the frame
    contours,hierarchy = cv2.findContours(thresh.copy(), 1, cv2.CHAIN_APPROX_NONE)

    # Find the biggest contour (if detected)
    if len(contours) > 0:

        c = max(contours, key=cv2.contourArea)
        M = cv2.moments(c)

        if M['m00'] != 0:
            cx = int(M['m10'] / M['m00'])
            cy = int(M['m01'] / M['m00'])
            print("cx",cx)
            print("cy",cy)
            
        else:
            # Handle the case when 'm00' is zero
            # For example, set cx and cy to some default values or print a message
            print("Warning: 'm00' is zero. No contours detected.")
            cx, cy = 0, 0  # Set default values

       
        cv2.line(frame,(cx,0),(cx,720),(255,0,0),1)

        cv2.line(frame,(0,cy),(1280,cy),(255,0,0),1)

        cv2.drawContours(frame, contours, -1, (0,255,0), 1)

        if cx > 100  and cy>100:
            print ("Turn Sharp Right")
            GPIO.output(in1,GPIO.LOW)
            GPIO.output(in2,GPIO.HIGH)
            pwmA.ChangeDutyCycle(80)
            GPIO.output(in3,GPIO.HIGH)
            GPIO.output(in4,GPIO.LOW)
            pwmB.ChangeDutyCycle(80)
            
        if cx >= 120:
            print ("Turn Right")
            GPIO.output(in1,GPIO.LOW)
            GPIO.output(in2,GPIO.HIGH)
            pwmA.ChangeDutyCycle(80)
            GPIO.output(in3,GPIO.HIGH)
            GPIO.output(in4,GPIO.LOW)
            pwmB.ChangeDutyCycle(80)
            
        
        if cx < 120 and cx > 50 and cy>80:
            print( "Turn Sharp Left")
            GPIO.output(in1,GPIO.HIGH)
            GPIO.output(in2,GPIO.LOW)
            pwmA.ChangeDutyCycle(80)
            GPIO.output(in3,GPIO.LOW)
            GPIO.output(in4,GPIO.HIGH)
            pwmB.ChangeDutyCycle(80)
            
        if cx < 120 and cx > 50 and cy <80:
            print ("On Track!")
            GPIO.output(in1,GPIO.HIGH)
            GPIO.output(in2,GPIO.LOW)
            pwmA.ChangeDutyCycle(40)
            GPIO.output(in3,GPIO.HIGH)
            GPIO.output(in4,GPIO.LOW)
            pwmB.ChangeDutyCycle(40)

        if cx <= 50:
            print( "Turn Left")
            GPIO.output(in1,GPIO.HIGH)
            GPIO.output(in2,GPIO.LOW)
            pwmA.ChangeDutyCycle(80)
            GPIO.output(in3,GPIO.LOW)
            GPIO.output(in4,GPIO.HIGH)
            pwmB.ChangeDutyCycle(80)
            
        
            
        

    else:
        print ("I don't see the line")
        GPIO.output(in1,GPIO.LOW)
        GPIO.output(in2,GPIO.HIGH)
        pwmA.ChangeDutyCycle(50)
        GPIO.output(in3,GPIO.LOW)
        GPIO.output(in4,GPIO.HIGH)
        pwmB.ChangeDutyCycle(50)


 

    #Display the resulting frame

    cv2.imshow('frame',frame)
   
    


    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
    
video_capture.release()
cv2.destroyAllWindows()
