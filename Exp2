import numpy as np
import cv2

# Initialize the camera
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    
    # Convert frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Convert frame to HSV color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    # Extract color channels (BGR)
    blue_channel = frame[:,:,0]
    green_channel = frame[:,:,1]
    red_channel = frame[:,:,2]
    
    # Extract color channels (HSV)
    hue_channel = hsv[:,:,0]
    saturation_channel = hsv[:,:,1]
    value_channel = hsv[:,:,2]
    
    # Apply Gaussian blur
    blur = cv2.GaussianBlur(frame, (5, 5), 0)
    
    # Apply Canny edge detection
    edges = cv2.Canny(gray, 100, 200)
    
    # Perform erosion and dilation
    kernel = np.ones((5,5), np.uint8)
    erosion = cv2.erode(gray, kernel, iterations=1)
    dilation = cv2.dilate(gray, kernel, iterations=1)
    
    # Perform histogram equalization
    equ = cv2.equalizeHist(gray)
    
    # Perform contrast adjustment
    alpha = 1.5  # Contrast control (1.0-3.0)
    beta = 0     # Brightness control (0-100)
    adjusted = cv2.convertScaleAbs(gray, alpha=alpha, beta=beta)
    
    # Display the frames
    cv2.imshow('Original', frame)
    cv2.imshow('Gray', gray)
    cv2.imshow('Blue Channel', blue_channel)
    cv2.imshow('Green Channel', green_channel)
    cv2.imshow('Red Channel', red_channel)
    cv2.imshow('HSV', hsv)
    cv2.imshow('Hue Channel', hue_channel)
    cv2.imshow('Saturation Channel', saturation_channel)
    cv2.imshow('Value Channel', value_channel)
    cv2.imshow('Gaussian Blur', blur)
    cv2.imshow('Canny', edges)
    cv2.imshow('Erosion', erosion)
    cv2.imshow('Dilation', dilation)
    cv2.imshow('Histogram Equalization', equ)
    cv2.imshow('Contrast Adjusted', adjusted)
    
    # Break the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv2.destroyAllWindows()
