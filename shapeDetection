import cv2
from picamera.array import PiRGBArray
from picamera import PiCamera
import numpy as np
import math

# Initialize the camera
#camera = PiCamera()
#camera.resolution = (640, 480)
#camera.framerate = 40
#raw_capture = PiRGBArray(camera, size=(640, 480))
cap=cv2.VideoCapture(0)
cap.set(3,640) 
cap.set(4,480)
threshold = 94

def ontrackbar(val):
    global threshold
    threshold=val
    

# Create trackbars for color selection (optional)
def nothing(x):
    pass

def auto_canny(image, sigma=0.33):
    # compute the median of the single channel pixel intensities
    v = np.median(image)

    # apply automatic Canny edge detection using the computed median
    lower = int(max(0, (1.0 - sigma) * v))
    upper = int(min(255, (1.0 + sigma) * v))
    edged = cv2.Canny(image, lower, upper)

    # return the edged image
    return edged

def getContours(img,cThr=[100,100],showCanny=False,minArea=1000,filter=0,draw =False):
    imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray,(3,3),1)
    imgCanny = cv2.Canny(imgBlur,cThr[0],cThr[1])
    kernel = np.ones((3,3))
    imgDial = cv2.dilate(imgCanny,kernel,iterations=1)
    imgThre = cv2.erode(imgDial,kernel,iterations=1)
    if showCanny:cv2.imshow('Canny',imgThre)
    
    contours,hiearchy = cv2.findContours(imgThre,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    finalCountours = []
    for i in contours:
        area = cv2.contourArea(i)
        if area > minArea:
            peri = cv2.arcLength(i,True)
            approx = cv2.approxPolyDP(i,0.02*peri,True)
            bbox = cv2.boundingRect(approx)
            if filter > 0:
                if len(approx) == filter:
                    finalCountours.append([len(approx),area,approx,bbox,i])
            else:
                finalCountours.append([len(approx),area,approx,bbox,i])
    finalCountours = sorted(finalCountours,key = lambda x:x[1] ,reverse= True)

    if draw:
        for con in finalCountours:
            cv2.drawContours(img,con[4],-1,(0,0,255),3)
    return img, finalCountours,imgThre

def getAngle(a, b, c):
    ang = math.degrees(math.atan2(c[1]-b[1], c[0]-b[0]) - math.atan2(a[1]-b[1], a[0]-b[0]))
    return ang + 360 if ang < 0 else ang

        
def shape(contour):
    shape_name = ""
    epsilon = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.01*epsilon, True)
    # Classify shapes based on number of sides
    num_sides = len(approx)
    if num_sides == 3:
        shape_name = "Triangle"
            
    elif num_sides == 4:
        x, y, w, h = cv2.boundingRect(approx)
        aspect_ratio = float(w) / h
        if 0.95 <= aspect_ratio <= 1.05:
            shape_name = "Square"
        else:
            shape_name = "Rectangle"
                    
    elif num_sides == 5:
        shape_name = "Pentagon"
            
    elif num_sides > 7:
        circularity = (4*math.pi*cv2.contourArea(contour)/(epsilon*epsilon))
        print(circularity)
        if circularity >0.8:
            shape_name = "Circle"
                    
        elif circularity >0.5 and circularity <0.8:
            shape_name = "Partial Circle"
                    
            
    elif num_sides == 6:
        shape_name = "Hexagon"
                
    elif num_sides == 7:
        if len(contours) > 0:
            M = cv2.moments(contour)
            if M['m00'] != 0:
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])
            
            else:
                # If the contour has no area, return None
                return None

            # Find the point in the contour that is farthest from the centroid
            max_distance = 0
            max_distance_point = None
            for point in contour:
            # Calculate the distance from the centroid to the current point
                distance = np.sqrt((point[0][0] - cx)*2 + (point[0][1] - cy)*2)
                if distance > max_distance:
                    max_distance = distance
                    max_distance_point = point[0]
                   
                angle = np.arctan2(max_distance_point[1] - cy, max_distance_point[0] - cx) * 180 / np.pi
                
                if -135 < angle <= -45:
                    shape_name = "Up Arrow"
                
                elif 45 <= angle < 135:
                    shape_name = "Down Arrow"
            
                elif -45 < angle < 45:
                    shape_name = "Right Arrow"
                    
                else:
                    shape_name = "Left Arrow"
                    
                
        
    return shape_name
                            

cv2.namedWindow("Trackbars")
cv2.createTrackbar("B", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("G", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("R", "Trackbars", 0, 255, nothing)
cv2.createTrackbar("Threshold","Trackbars",threshold,255,ontrackbar)

# Main loop
while True:
    
    #for frame in camera.capture_continuous(raw_capture, format="bgr", use_video_port=True):
    ret, image = cap.read()
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    _,thresh_frame = cv2.threshold(blurred,threshold,255,cv2.THRESH_BINARY)
    edges = cv2.Canny(thresh_frame,30,100)

    # Get color values from trackbars (optional)
    b = cv2.getTrackbarPos("B", "Trackbars")
    g = cv2.getTrackbarPos("G", "Trackbars")
    r = cv2.getTrackbarPos("R", "Trackbars")

    # Create a mask for the selected color (you can customize this)
    lower_bound = np.array([b, g, r])
    upper_bound = np.array([b + 10, g + 10, r + 10])
    mask = cv2.inRange(image, lower_bound, upper_bound)

    # Find contours in the mask
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Iterate through contours
    for contour in contours:
    # Approximate the shape
        if cv2.contourArea(contour)>1000:
            shape_name=shape(contour) 
            
            # Draw the shape on the original image
            cv2.drawContours(image, [contour], -1, (0, 255, 0), 2)
            M = cv2.moments(contour)
            if M['m00'] != 0:
                x = int(M['m10'] / M['m00'])
                y = int(M['m01'] / M['m00'])
                cv2.putText(image, shape_name, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
            else:
            # Handle the case when 'm00' is zero
            # For example, set cx and cy to some default values or print a message
                print("Warning: 'm00' is zero. No contours detected.")
                x, y = 0, 0  # Set default values
    

    # Display the processed image
    cv2.imshow("Shape Recognition", image)
    cv2.imshow("Contours", edges)
    key = cv2.waitKey(1) & 0xFF
    if key == ord("q"):
        break

    #raw_capture.truncate(0)

# Clean up
cv2.destroyAllWindows()
